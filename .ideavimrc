"" Source your .vimrc
"source ~/.vimrc

" -- plugins --
" set surround
" set commentary

" -- not working plugins --
" set ideajoin

" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
" set scrolloff=5 "

" Do incremental searching.
" set incsearch

" Don't use Ex mode, use Q for formatting.
" map Q gq

" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)

" Find more examples here: https://jb.gg/share-ideavimrc


" ~~~ START HERE: ~~~

" Current Questions:
" Should I link other files or just work in this? lets just do this one for now.
" Should I somehow have a shared file between nvim and ideaVim? not yet at least.
" How should I organise one big file? Define a File Structure, and have different sections (see below)
" What syntax should I have for the Sections, Tags (<Section1>...</Section1>), Indenting, numbering (1.2.4)? tbd...

" File Structure:
" (Example .ideavimrc)
" (Start Here above)
" (Current Questions above)
" - Sections:
"   -- Plugins
"   -- Keymapping:
"      --- core VIM stuff
"      --- Personal Preference Remapping
"      --- bug and pest killing
"      --- IDE Commands
"      --- IDE Tool windows
"      --- IDE code features
"      --- IDE VCS (git)
"      --- IDE debugging hotkeys
"      --- Run
"  -- Todo
" - Unorganised Additions
" - eof


" - Sections:
" -- Plugins:
set NERDTree

" -- Keymapping:
" --- Core VIM stuff
let mapleader = " "


" --- Personal Preference Remapping
" On my keyboard I have my '{}' on a symbols layer, under the 'jk' keys.
" The following remapping, allows for movement by paragraph, in the same direction has 'jk' up and down
noremap { }
noremap } {

" for a more natural scroll
:nnoremap <C-j> <C-d>
:nnoremap <C-k> <C-u>


" --- Bug and Pest Killing
" Action<QuickJavaDoc> is not working well, so unsetting <C-o> so I can use it for IDE's 'QuickJavaDoc'
unmap <C-o>

" Override vim's back with IDE's back to avoid bugs when using IDE's navigation and back:
" example: using gD (which is mapped to <Action>(GotoTypeDeclaration), and then trying to go back with <C-o>
" results in bug because the location histories are different between VIM and Rider.
" Note: <C-o> is normally back in VIM, but it is used by IDE's QuickJavaDoc, so I unmap it above.
map <C-u> <Action>(Back)
map <C-i> <Action>(Forward)
" or inverted?
" map <C-i> <Action>(Back)
" map <C-u> <Action>(Forward)


" --- IDE Commands
" ---- Track IDE Commands
map <leader>ct <Action>(VimFindActionIdAction)
" ^ this isn't working right

" ---- Open this file for quick config on the go, and quick reload
nnoremap <leader>ve :e C:\Users\t.wilson\.ideavimrc<CR>
nnoremap <leader>vr :action IdeaVim.ReloadVimRc.reload<CR>


" --- IDE Tool windows"
" Convention: <leader>s[char-representing-tool-window]
" Example: map <leader>st <Action>(ActivateTerminalToolWindow) (t for terminal)

" ---- Terminal
map <leader>st <Action>(ActivateTerminalToolWindow) 
map gt <Action>(ActivateTerminalToolWindow) 

" ---- File explorer
map <leader>sf :NERDTree<CR>
map <leader>f :NERDTree<CR>
"   ^ Can I also have a quicker mapping? I think so...

" ---- Git
map <leader>sg <Action>(ActivateVersionControlToolWindow)

" ---- Commit
map <leader>sc <Action>(ActivateCommitToolWindow)

" ---- Unit Tests
map <leader>su <Action>(ActivateUnitTestsToolWindow)

" ---- Notifications
map <leader>sn <Action>(ActivateNotificationsToolWindow)

" todo: add the rest...


" ---- Hiding Tool Windows
map <leader>sv <Action>(HideSideWindows)
map gF <Action>(HideSideWindows)
"   ^ duplicate
map <leader>sb <Action>(HideActiveWindow)
map gb <Action>(HideActiveWindow)
"   ^ duplicate
map <leader>sB <Action>(HideAllWindows)
map gB <Action>(HideAllWindows)
"   ^ duplicate


" --- IDE code features
" ---- Hover Info:
" convention: map g[action]
" map gh <Action>(QuickJavaDoc)
" map <leader>gh <Action>(QuickJavaDoc)
"map K <Action>(QuickJavaDoc)
map gh :action QuickJavaDoc<CR>
"   ^ this could be better as you have to push esc to exit hover doc
" having problems with all of the above, trying to get 'QuickJavaDoc' working, it only works half the time.
" Temp Solution: unset <C-o> and using that through IDE's keymap for QuickJavaDoc, works everytime.

" ---- Over Hover stuff:
map ge <Action>(ShowErrorDescription)
"   ^ this could be better as it could be built into 'QuickJavaDoc'
map gq <Action>(QuickImplementations)
" map gh <Action>(QuickDocumentation) -- this doesn't work
" note: in vscode vim, gh does all of this in one go"

" ---- Fancy IDE Things:
" convention: map <leader>g[action] "maybe this could be just g[action] like above?"
" Actions
map <leader>gc <action>(ShowIntentionActions)
" Refactor
map <leader>gr <action>(Refactorings.QuickListPopupAction)
" Generate
map <leader>gg <action>(Generate)
" maybe this should be a different section to 'Hover Info', if all sections should share the same hotkey convention?

" ---- Standard IDE Things:
" gd is GoToDeclaration, so gD can be:
map gD <Action>(GotoTypeDeclaration)

" Go to Implementation
map gi <Action>(ReSharperGotoImplementation)
map <leader>gi <Action>(ReSharperGotoImplementation)
map gI <Action>(GotoSuperMethod)
map <leader>gi <Action>(GotoSuperMethod)

" Go to Next Error
map <leader>ge <Action>(GotoNextError)
map <leader>gE <Action>(GotoPreviousError)
" what's the difference between 'GotoNextError' and 'ReSharperGotoNextErrorInSolution'?
" The non-Resharper actions appear to show the hover error info too, where the Resharper actions require an additional action to show error info
map <leader>gp <Action>(ReSharperGotoNextErrorInSolution)
map <leader>gP <Action>(ReSharperGotoPrevErrorInSolution)

" Find Usages
map <leader>gf <Action>(FindUsages)


" git - show history
map gH <Action>(Vcs.ShowTabbedFileHistory)
"   ^ maybe this should go under 'IDE Tool Windows' section

" --- IDE VCS (git)
map <leader>ch <Action>(Vcs.ShowTabbedFileHistory)
map <leader>ca <Action>(Annotate)

" --- IDE debugging hotkeys
map <leader>di <Action>(StepInto)
map <leader>du <Action>(StepOut)
map <leader>do <Action>(StepOver)

" --- Run
map <leader>rd <Action>(RiderUnitTestDebugContextAction)
map <leader>rf <Action>(ReformatCode)

" - Todo
" - hotkeys to split editors and navigate different splits (maybe not needed)

" - Unorganised Additions

map <leader>ab <Action>(ToggleLineBreakpoint)

